@baseUrl = http://localhost:5250

### Test 1: Get Hello World
GET {{baseUrl}}/
Accept: application/json

### Test 2: Create a new user
# @name createJohn
POST {{baseUrl}}/api/users
Content-Type: application/json

{
    "name": "John Doe",
    "email": "john.doe@example.com"
}

### Store John's ID from the response for later use
@johnId = {{createJohn.response.body.id}}

### Test 3: Create another user
# @name createJane
POST {{baseUrl}}/api/users
Content-Type: application/json

{
    "name": "Jane Smith",
    "email": "jane.smith@example.com"
}

### Store Jane's ID from the response for later use
@janeId = {{createJane.response.body.id}}

### Test 4: Get all users
GET {{baseUrl}}/api/users
Accept: application/json

### Test 5: Get a specific user
GET {{baseUrl}}/api/users/{{johnId}}
Accept: application/json

### Test 6: Update a user
PUT {{baseUrl}}/api/users/{{johnId}}
Content-Type: application/json

{
    "name": "John Doe Updated",
    "email": "john.updated@example.com"
}

### Test 7: Get the updated user to verify changes
GET {{baseUrl}}/api/users/{{johnId}}
Accept: application/json

### Test 8: Delete a user
DELETE {{baseUrl}}/api/users/{{johnId}}

### Test 9: Try to get the deleted user (should return 404 Not Found)
GET {{baseUrl}}/api/users/{{johnId}}
Accept: application/json

### Test 10: Try to update a non-existent user (should return 404 Not Found)
PUT {{baseUrl}}/api/users/11111111-1111-1111-1111-111111111111
Content-Type: application/json

{
    "name": "Non Existent",
    "email": "non.existent@example.com"
}

### Test 11: Try to delete a non-existent user (should return 404 Not Found)
DELETE {{baseUrl}}/api/users/11111111-1111-1111-1111-111111111111

### Test 12: Validation test - Create user with invalid data (empty name)
POST {{baseUrl}}/api/users
Content-Type: application/json

{
    "name": "",
    "email": "invalid@example.com"
}

### Test 13: Validation test - Create user with invalid email
POST {{baseUrl}}/api/users
Content-Type: application/json

{
    "name": "Invalid User",
    "email": "not-an-email"
}

### Test 14: Validation test - Update user with invalid data
PUT {{baseUrl}}/api/users/{{janeId}}
Content-Type: application/json

{
    "name": "",
    "email": "invalid@example.com"
}

### Test 15: Validation test - Create user with missing name field
POST {{baseUrl}}/api/users
Content-Type: application/json

{
    "email": "missing.name@example.com"
}

### Test 16: Validation test - Create user with missing email field
POST {{baseUrl}}/api/users
Content-Type: application/json

{
    "name": "Missing Email User"
}

### Test 17: Authentication - Access protected endpoint without token (should return 401 Unauthorized)
GET {{baseUrl}}/api/users
Accept: application/json

### Test 18: Authentication - Access protected endpoint with invalid token (should return 401 Unauthorized)
GET {{baseUrl}}/api/users
Accept: application/json
Authorization: Bearer invalid

### Test 19: Authentication - Access protected endpoint with valid token
GET {{baseUrl}}/api/users
Accept: application/json
Authorization: Bearer valid-token

### Test 20: Authentication - Access public endpoint without token (should work)
GET {{baseUrl}}/
Accept: application/json